vars(contains("roof"), contains("wall")),
funs( . * 100)
) %>%
View
train <-
df %>%
# throw away zip codes and target vars
select(-c(#typhoon_name,
admin_L3_code,
admin_L2_code,
admin_L3_name,
comp_damage_houses,
part_damage_houses)
) %>%
# convert response to perc
mutate(
perc_damage_houses = round( total_damage_houses / n_households * 100 , 3  )
) %>%
# log all predictors
mutate_at(
# except coords and roof info vars
vars( -c( typhoon_name,
x_pos, y_pos,
perc_damage_houses,
contains("roof"),
contains("wall")
)
) ,
funs(log)
) %>%
# make roof/wall vars bigger
mutate_at(
vars(contains("roof"), contains("wall")),
funs( . * 100)
) %>%
# replace NAs with 0s
mutate_if(
is.numeric,
funs( ifelse( is.na(.) | !is.finite(.), 0 , . ) ) )
train$typhoon_name
train$typhoon_name %>% table
holdout <- train %>% filter(typhoon_name == Haiyan)
holdout <- train %>% filter(typhoon_name == "Haiyan")
train_stripped <-
train %>%
# remove old response
select(-c(typhoon_name, total_damage_houses))
test_df <- read_csv("testset.csv")
fit_rf <-
randomForest::randomForest(perc_damage_houses ~ . ,
data = train_stripped,
ntree = 500,
mtry = 20,
importance = T)
fit_rf
colnames(holdout)
select(holdout, -c(typhoon_name, perc_damage_houses))
predict(fit_rf,
select(holdout, -c(typhoon_name, perc_damage_houses))
)
holdout$perc_damage_houses_pred <-
predict(fit_rf,
select(holdout, -c(typhoon_name, perc_damage_houses))
)
holdout$perc_damage_houses
df %>%
# throw away zip codes and target vars
select(-c(#typhoon_name,
admin_L3_code,
admin_L2_code,
admin_L3_name,
comp_damage_houses,
part_damage_houses)
) %>%
# convert response to perc
mutate(
perc_damage_houses = round( total_damage_houses / n_households * 100 , 3  )
) %>%
holdout$perc_damage_housesView
df %>%
# throw away zip codes and target vars
select(-c(#typhoon_name,
admin_L3_code,
admin_L2_code,
admin_L3_name,
comp_damage_houses,
part_damage_houses)
) %>%
# convert response to perc
mutate(
perc_damage_houses = round( total_damage_houses / n_households * 100 , 3  )
) %>%
View
df$total_damage_houses > df$n_households
df$total_damage_houses > df$n_households %>% sum
{df$total_damage_houses > df$n_households} %>% sum()
{df$total_damage_houses > df$pop_15} %>% sum()
rm(list=ls())
library("caret")
library("tidyverse")
df <- read_csv("trainingset.csv")
train <-
df %>%
# throw away zip codes and target vars
select(-c(#typhoon_name,
admin_L3_code,
admin_L2_code,
admin_L3_name,
comp_damage_houses,
part_damage_houses)
) %>%
# # convert response to perc
# mutate(
#   perc_damage_houses = round( total_damage_houses / n_households * 100 , 3  )
#   ) %>%
#
# log all predictors
mutate_at(
# except coords and roof info vars
vars( -c( typhoon_name,
total_damage_houses,
x_pos, y_pos,
perc_damage_houses,
contains("roof"),
contains("wall")
)
) ,
funs(log)
) %>%
# make roof/wall vars bigger
mutate_at(
vars(contains("roof"), contains("wall")),
funs( . * 100)
) %>%
# replace NAs with 0s
mutate_if(
is.numeric,
funs( ifelse( is.na(.) | !is.finite(.), 0 , . ) ) )
train <-
df %>%
# throw away zip codes and target vars
select(-c(#typhoon_name,
admin_L3_code,
admin_L2_code,
admin_L3_name,
comp_damage_houses,
part_damage_houses)
) %>%
# # convert response to perc
# mutate(
#   perc_damage_houses = round( total_damage_houses / n_households * 100 , 3  )
#   ) %>%
#
# log all predictors
mutate_at(
# except coords and roof info vars
vars( -c( typhoon_name,
total_damage_houses,
x_pos, y_pos,
contains("roof"),
contains("wall")
)
) ,
funs(log)
) %>%
# make roof/wall vars bigger
mutate_at(
vars(contains("roof"), contains("wall")),
funs( . * 100)
) %>%
# replace NAs with 0s
mutate_if(
is.numeric,
funs( ifelse( is.na(.) | !is.finite(.), 0 , . ) ) )
holdout <- train %>% filter(typhoon_name == "Haiyan")
train_stripped <-
train %>%
filter(typhoon_name != "Haiyan") %>%
# remove old response
select(-c(typhoon_name, total_damage_houses))
test_df <- read_csv("testset.csv")
test <-
test_df %>%
# throw away zip codes and target vars
select(-c(typhoon_name,
admin_L3_code,
admin_L2_code,
admin_L3_name,
comp_damage_houses,
part_damage_houses,
total_damage_houses
)
) %>%
# log all predictors
mutate_at(
# except coords and roof info vars
vars( -c( x_pos, y_pos, contains("roof") ) ) ,
funs(log)
) %>%
# replace NAs with 0s
mutate_all( funs( ifelse( is.na(.) | !is.finite(.), 0 , . ) ) )
library("randomForest")
fit_rf <-
randomForest::randomForest(total_damage_houses ~ . ,
data = train_stripped,
ntree = 500,
mtry = 20,
importance = T)
train_stripped <-
train %>%
filter(typhoon_name != "Haiyan") %>%
# remove old response
select(-typhoon_name)
fit_rf <-
randomForest::randomForest(total_damage_houses ~ . ,
data = train_stripped,
ntree = 500,
mtry = 20,
importance = T)
select(holdout, -c(typhoon_name, total_damage_houses))
predict(fit_rf,
select(holdout, -c(typhoon_name, total_damage_houses))
)
holdout$total_damage_houses_pred <-
predict(fit_rf,
select(holdout, -c(typhoon_name, total_damage_houses))
)
abs( holdout$total_damage_houses - holdout$total_damage_houses_pred )
abs( holdout$total_damage_houses - holdout$total_damage_houses_pred ) %>% mean
holdout$total_damage_houses - holdout$total_damage_houses_pred %>%
abs() %>%
mean()
holdout <-
holdout %>%
mutate(Diff = abs( total_damage_houses - total_damage_houses_pred ))
mean(holdout$Diff)
holdout <-
holdout %>%
mutate(diff_rf = abs( total_damage_houses - total_damage_houses_pred ))
mean(holdout$diff_rf)
fit_control <-
trainControl(
# 10-fold CV
method = "repeatedcv",
number = 10,
# repeated ten times
repeats = 10)
fit_treebag <- train(total_damage_houses ~ .,
data = train_stripped,
method = "treebag",
trControl = fit_control,
verbose = TRUE
)
fit_control <-
trainControl(
# 10-fold CV
method = "repeatedcv",
number = 10,
# repeated ten times
repeats = 10)
fit_treebag <- train(total_damage_houses ~ .,
data = train_stripped,
method = "treebag",
trControl = fit_control,
verbose = TRUE
)
fit_gbm <- train(total_damage_houses ~ .,
data = train_stripped,
method = "gbm",
trControl = fit_control,
verbose = FALSE
)
warnings()
holdout %>%
mutate(
# random forest prediction
total_damage_houses_pred_rf = predict(fit_rf,
select(holdout, -c(typhoon_name, total_damage_houses))
),
# treebag prediction
total_damage_houses_pred_treebag = predict(fit_treebag,
select(holdout, -c(typhoon_name, total_damage_houses))
),
# gbm prediction
total_damage_houses_pred_gbm = predict(fit_gbm,
select(holdout, -c(typhoon_name, total_damage_houses))
),
# differences between reality and predcited
diff_rf = abs( total_damage_houses_pred_rf - total_damage_houses ),
diff_treebag = abs( total_damage_houses_pred_treebag - total_damage_houses ),
diff_gbm = abs( total_damage_houses_pred_gbm - total_damage_houses )
)
holdout <-
holdout %>%
mutate(
# random forest prediction
total_damage_houses_pred_rf = predict(fit_rf,
select(holdout, -c(typhoon_name, total_damage_houses))
),
# treebag prediction
total_damage_houses_pred_treebag = predict(fit_treebag,
select(holdout, -c(typhoon_name, total_damage_houses))
),
# gbm prediction
total_damage_houses_pred_gbm = predict(fit_gbm,
select(holdout, -c(typhoon_name, total_damage_houses))
),
# differences between reality and predcited
diff_rf = abs( total_damage_houses_pred_rf - total_damage_houses ),
diff_treebag = abs( total_damage_houses_pred_treebag - total_damage_houses ),
diff_gbm = abs( total_damage_houses_pred_gbm - total_damage_houses )
)
holdout %>%
summarise_at(
vars(starts_with("diff_"),
funs(mean)
))
holdout %>%
summarise_at(
vars(starts_with("diff_")),
funs(mean)
)
differences_summarised <-
holdout %>%
summarise_at(
vars(starts_with("diff_")),
funs(mean)
)
fit_treebag
fit_gbm
best_fit_frm <- total_damage_houses ~ distance_typhoon_km + distance_first_impact + poverty_perc +
Rainfallme + average_speed_mph + x_pos +
y_pos
best_fit_rf <-
randomForest(formula = best_fit_frm,
data = train_stripped,
ntree = 500,
mtry = 20,
importance = TRUE)
best_fit_rf <-
randomForest(formula = best_fit_frm,
data = train_stripped,
ntree = 500,
mtry = 16,
importance = TRUE)
best_fit_rf <-
randomForest(formula = best_fit_frm,
data = train_stripped,
ntree = 500,
mtry = 12,
importance = TRUE)
ncols(train_stripped)
ncol(train_stripped)
best_fit_rf <-
randomForest(formula = best_fit_frm,
data = train_stripped,
ntree = 500,
mtry = 15,
importance = TRUE)
best_fit_rf <-
randomForest(formula = best_fit_frm,
data = train_stripped,
ntree = 500,
mtry = 6,
importance = TRUE)
best_fit_rf <-
randomForest(formula = best_fit_frm,
data = train_stripped,
ntree = 500,
mtry = 8,
importance = TRUE)
best_fit_rf <-
randomForest(formula = best_fit_frm,
data = train_stripped,
ntree = 500,
mtry = 7,
importance = TRUE)
pred_best_fit_rf <- predict(best_fit_rf,
select(holdout, -c(typhoon_name, total_damage_houses))
)
pred_best_fit_rf <- predict(best_fit_rf,
select(holdout, -c(typhoon_name, total_damage_houses))
)
pred_best_fit_rf
diff_best_fit_rf <- abs( pred_best_fit_rf - holdout$total_damage_houses )
mean(diff_best_fit_rf)
rm(list=ls())
library("caret")
library("tidyverse")
df <- read_csv("trainingset.csv")
train <-
df %>%
# throw away zip codes and target vars
select(-c(#typhoon_name,
admin_L3_code,
admin_L2_code,
admin_L3_name,
comp_damage_houses,
part_damage_houses)
) %>%
# # convert response to perc
# mutate(
#   perc_damage_houses = round( total_damage_houses / n_households * 100 , 3  )
#   ) %>%
#
# log all predictors
mutate_at(
# except coords and roof info vars
vars( -c( typhoon_name,
total_damage_houses,
x_pos, y_pos,
contains("roof"),
contains("wall")
)
) ,
funs(log)
) %>%
# make roof/wall vars bigger
mutate_at(
vars(contains("roof"), contains("wall")),
funs( . * 100)
) %>%
# replace NAs with 0s
mutate_if(
is.numeric,
funs( ifelse( is.na(.) | !is.finite(.), 0 , . ) ) )
train$typhoon_name %>% table
holdout <- train %>% filter(typhoon_name == "Haima")
train_stripped <-
train %>%
filter(typhoon_name != "Haiyan") %>%
# remove old response
select(-typhoon_name)
train_stripped <-
train %>%
filter(typhoon_name != "Haima") %>%
# remove old response
select(-typhoon_name)
test_df <- read_csv("testset.csv")
test <-
test_df %>%
# throw away zip codes and target vars
select(-c(typhoon_name,
admin_L3_code,
admin_L2_code,
admin_L3_name,
comp_damage_houses,
part_damage_houses,
total_damage_houses
)
) %>%
# log all predictors
mutate_at(
# except coords and roof info vars
vars( -c( x_pos, y_pos, contains("roof") ) ) ,
funs(log)
) %>%
# replace NAs with 0s
mutate_all( funs( ifelse( is.na(.) | !is.finite(.), 0 , . ) ) )
library("randomForest")
fit_rf <-
randomForest::randomForest(total_damage_houses ~ . ,
data = train_stripped,
ntree = 500,
mtry = 20,
importance = T)
fit_control <-
trainControl(
# 10-fold CV
method = "repeatedcv",
number = 10,
# repeated ten times
repeats = 10)
fit_treebag <- train(total_damage_houses ~ .,
data = train_stripped,
method = "treebag",
trControl = fit_control,
verbose = TRUE
)
fit_gbm <- train(total_damage_houses ~ .,
data = train_stripped,
method = "gbm",
trControl = fit_control,
verbose = FALSE
)
holdout <-
holdout %>%
mutate(
# random forest prediction
total_damage_houses_pred_rf = predict(fit_rf,
select(holdout, -c(typhoon_name, total_damage_houses))
),
# treebag prediction
total_damage_houses_pred_treebag = predict(fit_treebag,
select(holdout, -c(typhoon_name, total_damage_houses))
),
# gbm prediction
total_damage_houses_pred_gbm = predict(fit_gbm,
select(holdout, -c(typhoon_name, total_damage_houses))
),
# differences between reality and predcited
diff_rf = abs( total_damage_houses_pred_rf - total_damage_houses ),
diff_treebag = abs( total_damage_houses_pred_treebag - total_damage_houses ),
diff_gbm = abs( total_damage_houses_pred_gbm - total_damage_houses )
)
differences_summarised <-
holdout %>%
summarise_at(
vars(starts_with("diff_")),
funs(mean)
)
differences_summarised
